<style lang="less">
  .counter {
    text-align: left;
    font-size: 12px;
  }
  .count {
    font-size: 18px;
    font-weight: bold;
    &.red {
      color: red;
    }
    &.green {
      color: green;
    }
  }
</style>
<template>
  <view class="counter {{style}}">
    <button @tap="plus" size="mini">  +  </button>
    <button @tap="minus" size="mini">  -  </button>
    <button @tap="incNum" size="mini">  INCREMENT  </button>
    <button @tap="decNum" size="mini">  DECREMENT  </button>
    <button @tap="asyncInc" size="mini">  ASYNC INCREMENT  </button>
    <button @tap="getDataOld(7)" size="mini"> 原版异步写法 </button>
    <button @tap="getDataNew(2)" size="mini">  promise 异步写法 返回的错误提示 </button>
    <!-- 如果有参数是不能这么调用的 即使有默认参数也不行的 传过去的是个对象 -->
    <!-- 原来可以这么直接用 都忘记了 不过呢 这个参数传过去是字符串格式 action那边必须转换成int才可以 -->
    <button @tap="getData(2)" size="mini">  thunk 异步写法 </button>
    <button @tap="addItem" size="mini">  ADD_ITEM </button>
    <text class="count"> {{num}} </text>
    <text class="count"> {{stateNum}} </text>
    <text class="count"> {{asyncNum}} </text>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import {
    connect
  } from 'wepy-redux'
  import {
    INCREMENT,
    DECREMENT
  } from '../store/types/counter'
  import {
    asyncInc,
    getData,
    getDataOld,
    getDataNew,
    AddItem
  } from '../store/actions'
  // import {  getData } from '../store/actions'
  @connect({
    stateNum(state) {
      return state.counter.num
    },
    asyncNum(state) {
      return state.counter.asyncNum
    }
  }, {
    incNum: INCREMENT,
    decNum: DECREMENT,
    dispatchAddItem: AddItem,
    getData,
    getDataOld,
    getDataNew,
    asyncInc
  })
  export default class Counter extends wepy.component {
    props = {
      num: {
        type: [Number, String],
        coerce: function(v) {
          return +v
        },
        default: 50
      }
    }
    data = {}
    events = {
      'index-broadcast': (...args) => {
        let $event = args[args.length - 1]
        console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      }
    }
    watch = {
      num(curVal, oldVal) {
        console.log(`旧值：${oldVal}，新值：${curVal}`)
      }
    }
    methods = {
      plus() {
        this.num = this.num + 1
        console.log(this.$name + ' plus tap')
        this.$emit('index-emit', 1, 2, 3)
      },
      minus() {
        this.num = this.num - 1
        console.log(this.$name + ' minus tap')
      },
      addItem() {
        // 这里没有参数的话 就是默认参数 而且是int型的
        // this.methods.getData()
        this.methods.dispatchAddItem('dd')
      }
    }
  }
</script>

